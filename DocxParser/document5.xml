<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<w:document xmlns:wpc="http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas" xmlns:mo="http://schemas.microsoft.com/office/mac/office/2008/main" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mv="urn:schemas-microsoft-com:mac:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:r="http://schemas.openxmlformats.org/officeDocument/2006/relationships" xmlns:m="http://schemas.openxmlformats.org/officeDocument/2006/math" xmlns:v="urn:schemas-microsoft-com:vml" xmlns:wp14="http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing" xmlns:wp="http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing" xmlns:w10="urn:schemas-microsoft-com:office:word" xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main" xmlns:w14="http://schemas.microsoft.com/office/word/2010/wordml" xmlns:wpg="http://schemas.microsoft.com/office/word/2010/wordprocessingGroup" xmlns:wpi="http://schemas.microsoft.com/office/word/2010/wordprocessingInk" xmlns:wne="http://schemas.microsoft.com/office/word/2006/wordml" xmlns:wps="http://schemas.microsoft.com/office/word/2010/wordprocessingShape" mc:Ignorable="w14 wp14"><w:body><w:p w14:paraId="5708A876" w14:textId="77777777" w:rsidR="006542F8" w:rsidRDefault="006542F8"><w:pPr><w:pStyle w:val="Header"/><w:jc w:val="right"/></w:pPr></w:p><w:p w14:paraId="02338A7E" w14:textId="77777777" w:rsidR="006542F8" w:rsidRDefault="005E1750"><w:pPr><w:jc w:val="right"/></w:pPr><w:r><w:t xml:space="preserve">Evan Fritts and Bradley </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>Slayter</w:t></w:r><w:proofErr w:type="spellEnd"/></w:p><w:p w14:paraId="0E54C32B" w14:textId="77777777" w:rsidR="006542F8" w:rsidRDefault="005E1750"><w:pPr><w:pStyle w:val="Header"/><w:jc w:val="right"/></w:pPr><w:r><w:tab/></w:r><w:r><w:tab/><w:t>CSCE 3600.001</w:t></w:r></w:p><w:p w14:paraId="64CFEF5C" w14:textId="7F96549B" w:rsidR="006542F8" w:rsidRDefault="005E1750"><w:pPr><w:pStyle w:val="Header"/><w:jc w:val="right"/></w:pPr><w:r><w:tab/></w:r><w:bookmarkStart w:id="0" w:name="_GoBack"/><w:bookmarkEnd w:id="0"/><w:r><w:tab/><w:t>DUE  11/4</w:t></w:r><w:r><w:t>/2013</w:t></w:r></w:p><w:p w14:paraId="181E89BF" w14:textId="77777777" w:rsidR="006542F8" w:rsidRDefault="006542F8"><w:pPr><w:pStyle w:val="Header"/><w:jc w:val="right"/></w:pPr></w:p><w:p w14:paraId="66971863" w14:textId="77777777" w:rsidR="006542F8" w:rsidRDefault="005E1750"><w:pPr><w:pStyle w:val="Header"/><w:jc w:val="center"/><w:rPr><w:b/><w:bCs/><w:sz w:val="48"/><w:szCs w:val="48"/></w:rPr></w:pPr><w:r><w:rPr><w:b/><w:bCs/><w:sz w:val="48"/><w:szCs w:val="48"/></w:rPr><w:t xml:space="preserve">Project 3 </w:t></w:r><w:proofErr w:type="gramStart"/><w:r><w:rPr><w:b/><w:bCs/><w:sz w:val="48"/><w:szCs w:val="48"/></w:rPr><w:t>Report</w:t></w:r><w:proofErr w:type="gramEnd"/></w:p><w:p w14:paraId="4D8F6A0D" w14:textId="77777777" w:rsidR="006542F8" w:rsidRDefault="006542F8"><w:pPr><w:pStyle w:val="Header"/><w:jc w:val="center"/><w:rPr><w:b/><w:bCs/><w:sz w:val="48"/><w:szCs w:val="48"/></w:rPr></w:pPr></w:p><w:p w14:paraId="11E457A2" w14:textId="77777777" w:rsidR="006542F8" w:rsidRDefault="005E1750"><w:pPr><w:pStyle w:val="Header"/></w:pPr><w:r><w:t xml:space="preserve">The requirements of this project were to add functionality of “advanced” string processing. This would add the ability to use comments in the shell, set variables and </w:t></w:r><w:r><w:t>aliases to complex strings which could include spaces and other characters, as well as using the '!' to separate multiple values in an environment variable.</w:t></w:r></w:p><w:p w14:paraId="00028C57" w14:textId="77777777" w:rsidR="006542F8" w:rsidRDefault="006542F8"><w:pPr><w:pStyle w:val="Header"/><w:rPr><w:b/><w:bCs/></w:rPr></w:pPr></w:p><w:p w14:paraId="7CCE98B4" w14:textId="77777777" w:rsidR="00B8654F" w:rsidRDefault="00B8654F"><w:pPr><w:pStyle w:val="Header"/><w:rPr><w:b/><w:bCs/></w:rPr></w:pPr></w:p><w:p w14:paraId="1CC52CF4" w14:textId="77777777" w:rsidR="006542F8" w:rsidRDefault="005E1750"><w:pPr><w:pStyle w:val="Header"/></w:pPr><w:r><w:t>--STRING PROCESSING--</w:t></w:r></w:p><w:p w14:paraId="535A3BC5" w14:textId="77777777" w:rsidR="006542F8" w:rsidRDefault="006542F8"><w:pPr><w:pStyle w:val="Header"/></w:pPr></w:p><w:p w14:paraId="47B3D812" w14:textId="77777777" w:rsidR="006542F8" w:rsidRDefault="00B8654F" w:rsidP="00B8654F"><w:pPr><w:pStyle w:val="Header"/></w:pPr><w:r><w:rPr><w:rFonts w:cs="Times New Roman"/></w:rPr><w:t xml:space="preserve">Adding complex strings was not that difficult as the data that was passed to the function is tokenized and just requires a recreation of the data and pulling the complex string out based on the indexes of </w:t></w:r><w:proofErr w:type="gramStart"/><w:r><w:rPr><w:rFonts w:cs="Times New Roman"/></w:rPr><w:t>{ and</w:t></w:r><w:proofErr w:type="gramEnd"/><w:r><w:rPr><w:rFonts w:cs="Times New Roman"/></w:rPr><w:t xml:space="preserve"> }.  Once the</w:t></w:r><w:r><w:rPr><w:rFonts w:cs="Times New Roman"/></w:rPr><w:t xml:space="preserve"> data is pulled out all you have to do is have the double pointer point to the new pointer to the complex string and everything works.  To implement the running of complex strings required a similar function but this one looks for complex strings within the link lists and extracts the data out and tokenizes that data for the callback functions.  This allows for most of the original code to be unchanged and just more preprocessing is done on the data beforehand.</w:t></w:r></w:p><w:p w14:paraId="59750CC5" w14:textId="77777777" w:rsidR="006542F8" w:rsidRDefault="006542F8"><w:pPr><w:pStyle w:val="Header"/></w:pPr></w:p><w:p w14:paraId="7A77C06C" w14:textId="77777777" w:rsidR="006542F8" w:rsidRDefault="005E1750"><w:pPr><w:pStyle w:val="Header"/></w:pPr><w:r><w:t>--COMMAND LINE ARGUMENTS</w:t></w:r><w:r w:rsidR="00B8654F"><w:t>—</w:t></w:r></w:p><w:p w14:paraId="5F1DEDC9" w14:textId="77777777" w:rsidR="00B8654F" w:rsidRDefault="00B8654F"><w:pPr><w:pStyle w:val="Header"/></w:pPr></w:p><w:p w14:paraId="1A383048" w14:textId="77777777" w:rsidR="006542F8" w:rsidRDefault="005E1750"><w:pPr><w:pStyle w:val="Header"/></w:pPr><w:r><w:t xml:space="preserve">   We wer</w:t></w:r><w:r><w:t>e unsure if this component needed to be implemented but decided to include it anyway. In order for the shell to execute command line arguments as external commands, I originally extracted the arguments from *</w:t></w:r><w:proofErr w:type="spellStart"/><w:proofErr w:type="gramStart"/><w:r><w:t>argv</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t>[</w:t></w:r><w:proofErr w:type="gramEnd"/><w:r><w:t>] and placed them into a new array. After r</w:t></w:r><w:r><w:t xml:space="preserve">ealizing this was redundant and used unnecessary </w:t></w:r><w:proofErr w:type="spellStart"/><w:proofErr w:type="gramStart"/><w:r><w:t>nshMalloc</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t>(</w:t></w:r><w:proofErr w:type="gramEnd"/><w:r><w:t>) calls, I ended up placing *</w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>argv</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve">[] into </w:t></w:r><w:proofErr w:type="spellStart"/><w:r><w:t>execvp</w:t></w:r><w:proofErr w:type="spellEnd"/><w:r><w:t xml:space="preserve">() and read the return value into an integer. If the returned value </w:t></w:r><w:proofErr w:type="gramStart"/><w:r><w:t>was</w:t></w:r><w:proofErr w:type="gramEnd"/><w:r><w:t xml:space="preserve"> -1, this would mean the program that was attempted to be executed failed to ru</w:t></w:r><w:r><w:t xml:space="preserve">n. In that case, an error was displayed.  </w:t></w:r></w:p><w:sectPr w:rsidR="006542F8"><w:pgSz w:w="12240" w:h="15840"/><w:pgMar w:top="1134" w:right="1134" w:bottom="1134" w:left="1134" w:header="0" w:footer="0" w:gutter="0"/><w:cols w:space="720"/><w:formProt w:val="0"/></w:sectPr></w:body></w:document>